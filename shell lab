#include <sys/wait.h>
#include <errno.h>

/* Misc manifest constants */
#define MAXLINE    1024   /* max line size */
#define MAXARGS     128   /* max args on a command line */
#define MAXJOBS      16   /* max jobs at any point in time */
#define MAXJID    1<<16   /* max job ID */

/* Job states */
#define UNDEF 0 /* undefined */
#define FG 1    /* running in foreground */
#define BG 2    /* running in background */
#define ST 3    /* stopped */

/* 
 * Jobs states: FG (foreground), BG (background), ST (stopped)
 * Job state transitions and enabling actions:
 *     FG -> ST  : ctrl-z
 *     ST -> FG  : fg command
 *     ST -> BG  : bg command
 *     BG -> FG  : fg command
 * At most 1 job can be in the FG state.
 */

/* Global variables */
extern char **environ;      /* defined in libc */
char prompt[] = "tsh> ";    /* command line prompt (DO NOT CHANGE) */
int verbose = 0;            /* if true, print additional output */
int nextjid = 1;            /* next job ID to allocate */
char sbuf[MAXLINE];         /* for composing sprintf messages */

struct job_t {              /* The job struct */
    pid_t pid;              /* job PID */
    int jid;                /* job ID [1, 2, ...] */
    int state;              /* UNDEF, BG, FG, or ST */
    char cmdline[MAXLINE];  /* command line */
};
struct job_t jobs[MAXJOBS]; /* The job list */
/* End global variables */


// 宏定义
// debug开启标识，编译前将其手动置为1
#define DEBUG 0
// 在代码中需要打印信息的地方 使用 debug_println 宏来进行打印
#define debug_println(fmt, ...)                                                
  do {                                                                         
    if (DEBUG)                                                                 
      fprintf(stderr, fmt "\n", __VA_ARGS__);                                  
  } while (0)



//主函数
int main(int argc, char **argv) 
{
    char c;
    char cmdline[MAXLINE];
    int emit_prompt = 1;  //发出提示

    //将stderr重定向都stdout,这样stdout上能获得所有输出
    dup2(1, 2);

    //解析命令行
    while ((c = getopt(argc, argv, "hvp")) != EOF) {
        switch (c) {
        case 'h':             //打印帮助文档
            usage();
	    	break;
        case 'v':             //发出其他诊断信息
            verbose = 1;
	    	break;
        case 'p':             /* don't print a prompt */
            emit_prompt = 0;  //方便进行自动测试
	    	break;
		default:
            usage();
		}
    }

    /* Install the signal handlers */

    /* These are the ones you will need to implement */
    Signal(SIGINT,  sigint_handler);   /* ctrl-c */
    Signal(SIGTSTP, sigtstp_handler);  /* ctrl-z */
    Signal(SIGCHLD, sigchld_handler);  /* Terminated or stopped child */

    /* This one provides a clean way to kill the shell */
    Signal(SIGQUIT, sigquit_handler); 

    /* Initialize the job list */
    initjobs(jobs);

    /* Execute the shell's read/eval loop */
    while (1) {

		/* Read command line */
		if (emit_prompt) {
	    	printf("%s", prompt);
	    	fflush(stdout);
		}
		if ((fgets(cmdline, MAXLINE, stdin) == NULL) && ferror(stdin))
	    	app_error("fgets error");
		if (feof(stdin)) { /* End of file (ctrl-d) */
			fflush(stdout);
	    	exit(0);
		}

	/* Evaluate the command line */
	eval(cmdline);
	fflush(stdout);
	fflush(stdout);
    } 

    exit(0);  //永远不会到达
}



//eval函数对命令行进行求值
//实验要求:如果是内部指令，立刻执行；否则调用一个子进程（分前后台运行），每个子进程都要有一个唯一的进程组ID。同时也要有信号处理程序
void eval(char *cmdline) 
{
	char *argv[MAXARGS];   //指针数组
	char buf[MAXLINE];
	int bg;
	pid_t pid;             //进程id
	
	strcpy(buf, cmdline);
	bg = parseline(buf, argv);
	if(argv[0] == NULL)
		return;
		
	if(!builtin_command(argv))            //前台运行 
	{
		sigset_t mask_all, mask_one, prev_one;  
    	sigfillset(&mask_all);            //把每个信号都放进mask_all当中
    	sigemptyset(&mask_one);			  //初始化mask_one为空
    	sigaddset(&mask_one, SIGCHLD);	  //把SIGCHLD信号加入到mask_one中去
		
		sigprocmask(SIG_BLOCK, &mask_one, &prev_one);      //改变当前阻塞的信号集合，把mask_one中的信号添加到block向量中，block的值保存在prev_one中。这一步阻塞SIGCHLD信号
		if((pid = Fork()) == 0) 
		{
			setpgid(0,0);                 //子进程0归到进程组0
			
			sigprocmask(SIG_SETMASK, &prev_one, NULL);     //prev_one的值赋给block向量
		
		 	if (execvp(argv[0], argv) < 0)           
			{
		  		printf("%s: Command not found\n", argv[0]);
        		exit(0);
			}
		}	
		
		sigprocmask(SIG_BLOCK, &mask_all, NULL);         //把子进程结束的信号发送出去(父进程屏蔽所有信号)
		if (!bg) 
		{                                    //前台程序加入到joblist中去
			addjob(jobs, pid, FG, cmdline);
      		waitfg(pid);
		} 
		else 
		{
		 	addjob(jobs, pid, BG, cmdline);           
      		sigprocmask(SIG_SETMASK, &prev_one, NULL);
      		printf("[%d] (%d) %s", pid2jid(pid), pid, cmdline);
		}		
	}
	
    return;
}


int builtin_command(char **argv)
{
	if(!strcmp(argv[0], "quit"))   //strcmp()内两个参数相等返回0
		exit(0);
	if(!strcmp(argc[0], "&"))    //后台运行
		return 1;
	return 0;                     //前台运行
}


//解析命令行 单引号括起来的字符作为一个参数，后台任务返回true，前台任务返回false
int parseline(const char *cmdline, char **argv) 
{
    static char array[MAXLINE];      //复制命令行
    char *buf = array;               // ptr that traverses command line */这一步中在字符串buf后会自动加上一个\0
    char *delim;                     / 指向第一个定界符
    int argc;                        
    int bg;                          

    strcpy(buf, cmdline);            //cmdline最后是\n 
    buf[strlen(buf)-1] = ' ';        //q把\n用空格替代
    while (*buf && (*buf == ' '))    //跳过头部的空格，注意这里的判断条件是&&  ' '也算一个字符
	      buf++;

    /* Build the argv list */
    argc = 0;

    while ((delim = strchr(buf, ' '))) {
	      argv[argc++] = buf;     //注意函数定义里的参数，argv是一个指向指针的数组，数组里存放的是指针
	      *delim = '\0';          //空格用\0来代替
	      buf = delim + 1;
	      while (*buf && (*buf == ' '))    /* ignore spaces */
	            buf++;
	      }
    }
    argv[argc] = NULL;
    
    if (argc == 0)  /* ignore blank line */
	      return 1;

    if ((bg = (*argv[argc-1] == '&')) != 0) {    //后台运行，bg = 1
	      argv[--argc] = NULL;
    }
    return bg;
}



//完成bg与fg的分类工作
void do_bgfg(char **argv) {
	struct job_t *job_ptr;
	pid_t jobid;
	pid_t pid;

  
  	if (argv[1] == NULL) {
	  	printf("%s command requires PID or %%jobid argument\n", argv[0]);
	  	return;
  	}
	
  	if ((argv[1][0] < '0' || argv[1][0] > '9') && argv[1][0] != '%') {
      	printf("%s: argument must be a PID or %%jobid\n", argv[0]);
      	return;
  	}

  
  	if (argv[1][0] == '%') 
	{
      	jobid = atoi(argv[1] + 1);
      	job_ptr = getjobjid(jobs, jobid);             //job
      	if (job_ptr == NULL) {
          	printf("%s: No such job\n", argv[1]);
          	return;
      	}
  	} 
  	else 
	{
    	pid = atoi(argv[1]);
    	job_ptr = getjobpid(jobs, pid);               //process
    	if (job_ptr == NULL) 
		{
      		printf("(%s): No such process\n", argv[1]);
      		return;
    	}
  	}
  	
  	kill(-(job_ptr->pid), SIGCONT);
  	
  	if (strcmp(argv[0], "fg") == 0) 
	{
    	job_ptr->state = FG;
    	waitfg(job_ptr->pid);
  	} 
	else 
	{
    	job_ptr->state = BG;
    	printf("[%d] (%d) %s", job_ptr->jid, job_ptr->pid, job_ptr->cmdline);
  	}
  	return;
}


//阻塞直到pid不再是前台进程
void waitfg(pid_t pid) {
  	sigset_t mask;
  	sigemptyset(&mask);
  	debug_println("[waitfg before loop] waitfg pid: %d", pid);
  	while (pid == fgpid(jobs)) {
    	debug_println("[waitfg in loop] waitfg pid: %d", pid);
    	sigsuspend(&mask);            //不阻塞任何进程，挂起当前进程
  	}
  	
  	sigprocmask(SIG_SETMASK, &mask, NULL);
  	debug_println("[waitfg after loop] waitfg pid: %d", pid);
  	return;
}



//job清零
void clearjob(struct job_t *job) {
    job->pid = 0;
    job->jid = 0;
    job->state = UNDEF;
    job->cmdline[0] = '\0';
}


//初始化job列表
void initjobs(struct job_t *jobs) {
    int i;

    for (i = 0; i < MAXJOBS; i++)
	clearjob(&jobs[i]);
}


//返回最大ID的job
int maxjid(struct job_t *jobs) 
{
    int i, max=0;

    for (i = 0; i < MAXJOBS; i++)
	if (jobs[i].jid > max)
	    max = jobs[i].jid;
    return max;
}


//添加一项作业到作业列表中去
int addjob(struct job_t *jobs, pid_t pid, int state, char *cmdline) 
{
    int i;
    
    if (pid < 1)
	return 0;

    for (i = 0; i < MAXJOBS; i++) {
	if (jobs[i].pid == 0) {
	    jobs[i].pid = pid;
	    jobs[i].state = state;
	    jobs[i].jid = nextjid++;
	    if (nextjid > MAXJOBS)
		nextjid = 1;
	    strcpy(jobs[i].cmdline, cmdline);
  	    if(verbose){
	        printf("Added job [%d] %d %s\n", jobs[i].jid, jobs[i].pid, jobs[i].cmdline);
            }
            return 1;
	}
    }
    printf("Tried to create too many jobs\n");
    return 0;
}


//删除一个作业中的进程
int deletejob(struct job_t *jobs, pid_t pid) 
{
    int i;

    if (pid < 1)
	return 0;

    for (i = 0; i < MAXJOBS; i++) {
	if (jobs[i].pid == pid) {
	    clearjob(&jobs[i]);
	    nextjid = maxjid(jobs)+1;
	    return 1;
	}
    }
    return 0;
}


//返回当前前台作业的PID
pid_t fgpid(struct job_t *jobs) {
    int i;

    for (i = 0; i < MAXJOBS; i++)
	if (jobs[i].state == FG)
	    return jobs[i].pid;
    return 0;
}


//在job列表中找到指定的job
struct job_t *getjobpid(struct job_t *jobs, pid_t pid) {
    int i;

    if (pid < 1)
	return NULL;
    for (i = 0; i < MAXJOBS; i++)
	if (jobs[i].pid == pid)
	    return &jobs[i];
    return NULL;
}


/* getjobjid  - Find a job (by JID) on the job list */
struct job_t *getjobjid(struct job_t *jobs, int jid) 
{
    int i;

    if (jid < 1)
	return NULL;
    for (i = 0; i < MAXJOBS; i++)
	if (jobs[i].jid == jid)
	    return &jobs[i];
    return NULL;
}


//把进程ID映射到job ID
int pid2jid(pid_t pid) 
{
    int i;

    if (pid < 1)
	return 0;
    for (i = 0; i < MAXJOBS; i++)
		if (jobs[i].pid == pid) 
		{
    		return jobs[i].jid;
    	}
    return 0;
}


//打印job列表
void listjobs(struct job_t *jobs) 
{
    int i;
    
    for (i = 0; i < MAXJOBS; i++) {
	if (jobs[i].pid != 0) {
	    printf("[%d] (%d) ", jobs[i].jid, jobs[i].pid);
	    switch (jobs[i].state) {
		case BG: 
		    printf("Running ");
		    break;
		case FG: 
		    printf("Foreground ");
		    break;
		case ST: 
		    printf("Stopped ");
		    break;
	    default:
		    printf("listjobs: Internal error: job[%d].state=%d ", 
			   i, jobs[i].state);
	    }
	    printf("%s", jobs[i].cmdline);
	}
    }
}


//信号处理函数
void sigchld_handler(int sig) {
  	int olderrno = errno;
  	sigset_t mask_all, prev_all;
  	pid_t pid;
  	int status;

  	
  	sigfillset(&mask_all);
  	debug_println("[handle chld] sig: %d", sig);
  	
  	while ((pid = waitpid(-1, &status, WNOHANG | WUNTRACED)) > 0) 
	{
    	debug_println("[handle chld] in loop pid: %d", pid);
    	if (WIFEXITED(status)) 
		{
      		
      		debug_println("[chld hand] pid: %d", pid);
      		sigprocmask(SIG_BLOCK, &mask_all,&prev_all); //用来同步进程 见 CSAPP edition-3 8-40
      		deletejob(jobs, pid);
      		sigprocmask(SIG_SETMASK, &prev_all, NULL);
      		struct job_t *job_ptr = getjobpid(jobs, pid);
      		if (job_ptr == NULL) {
        		debug_println("[chld hand] after delete, job_ptr is NULL %d", 0);
      		} 
			else 
			{
        		debug_println("[chld hand] after delete, jobpid: [%d] (%d)", job_ptr->jid, job_ptr->pid);
      		}
    	} 
		else if (WIFSIGNALED(status)) 
		{
      		
      		struct job_t *job_ptr = getjobpid(jobs, pid);
      		
      		printf("Job [%d] (%d) terminated by signal %d\n", job_ptr->jid,
             	job_ptr->pid, WTERMSIG(status));
      		sigprocmask(SIG_BLOCK, &mask_all, &prev_all);
      		deletejob(jobs, pid);
      		sigprocmask(SIG_SETMASK, &prev_all, NULL);
    	} 
		else 
		{
      		
      		struct job_t *job_ptr = getjobpid(jobs, pid);
      		
      		printf("Job [%d] (%d) stopped by signal %d\n", job_ptr->jid, job_ptr->pid,
             	WSTOPSIG(status));
      		sigprocmask(SIG_BLOCK, &mask_all, &prev_all);
      		job_ptr->state = ST;
      		sigprocmask(SIG_SETMASK, &prev_all, NULL);
    	}
 	 }
  	errno = olderrno;
  	return;
}


void sigint_handler(int sig) 
{
  	pid_t pid = fgpid(jobs);
  	debug_println("[INT handl] get INT sig: %d", sig);
  	debug_println("[INT handl] pid: %d", pid);

 	if (pid != 0 && kill(-pid, SIGINT) < 0)
    	unix_error("sigint_handler: kill");
  	return;
}


void sigtstp_handler(int sig) 
{
  	pid_t pid = fgpid(jobs);
  	debug_println("[STP handl] get STP sig: %d", sig);
  	debug_println("[STP handl] pid: %d", pid);

  	if (-pid != 0 && kill(-pid, SIGTSTP) < 0)
    	unix_error("sigtstp_handler: kill");
  	return;
}



pid_t Fork(void) 
{
  	pid_t pid;
  	if ((pid = fork()) < 0) 
  	{
    	unix_error("Fork error");
  	}
 	return pid;
}



//使用说明
void usage(void) 
{
    printf("Usage: shell [-hvp]\n");
    printf("   -h   print this message\n");
    printf("   -v   print additional diagnostic information\n");
    printf("   -p   do not emit a command prompt\n");
    exit(1);
}


//unix错误
void unix_error(char *msg)
{
    fprintf(stdout, "%s: %s\n", msg, strerror(errno));
    exit(1);
}


//应用程序样式错误
void app_error(char *msg)
{
    fprintf(stdout, "%s\n", msg);
    exit(1);
}


//sigaction函数
handler_t *Signal(int signum, handler_t *handler) 
{
    struct sigaction action, old_action;

    action.sa_handler = handler;  
    sigemptyset(&action.sa_mask); /* block sigs of type being handled */
    action.sa_flags = SA_RESTART; /* restart syscalls if possible */

    if (sigaction(signum, &action, &old_action) < 0)
	unix_error("Signal error");
    return (old_action.sa_handler);
}


//来自键盘的退出信号处理程序
void sigquit_handler(int sig) 
{
    printf("Terminating after receipt of SIGQUIT signal\n");
    exit(1);
}
