


//eval函数对命令行进行求值
//实验要求:如果是内部指令，立刻执行；否则调用一个子进程（分前后台运行），每个子进程都要有一个唯一的进程组ID。同时也要有信号处理程序
void eval(char *cmdline) 
{
	char *argv[MAXARGS];   //指针数组
	char buf[MAXLINE];
	int bg;
	pid_t pid;             //进程id
	
	strcpy(buf, cmdline);
	bg = parseline(buf, argv);
	if(argv[0] == NULL)
		return;
		
	if(!builtin_command(argv))            //前台运行 
	{
		sigset_t mask_all, mask_one, prev_one;  
    	sigfillset(&mask_all);            //把每个信号都放进mask_all当中
    	sigemptyset(&mask_one);			  //初始化mask_one为空
    	sigaddset(&mask_one, SIGCHLD);	  //把SIGCHLD信号加入到mask_one中去
		
		sigprocmask(SIG_BLOCK, &mask_one, &prev_one);      //改变当前阻塞的信号集合，把mask_one中的信号添加到block向量中，block的值保存在prev_one中。这一步阻塞SIGCHLD信号
		if((pid = Fork()) == 0) 
		{
			setpgid(0,0);                 //子进程0归到进程组0
			
			sigprocmask(SIG_SETMASK, &prev_one, NULL);     //prev_one的值赋给block向量
		
		 	if (execvp(argv[0], argv) < 0)           
			{
		  		printf("%s: Command not found\n", argv[0]);
        		exit(0);
			}
		}	
		
		sigprocmask(SIG_BLOCK, &mask_all, NULL);         //把子进程结束的信号发送出去(父进程屏蔽所有信号)
		
		if (!bg) {                                    //前台程序加入到joblist中去
			addjob(jobs, pid, FG, cmdline);
      		waitfg(pid);
		} 
		else 
		{
		 	addjob(jobs, pid, BG, cmdline);           
      		sigprocmask(SIG_SETMASK, &prev_one, NULL);
      		printf("[%d] (%d) %s", pid2jid(pid), pid, cmdline);
		}		
	}
	
    return;
}


int builtin_command(char **argv)
{
	if(!strcmp(argv[0], "quit"))   //strcmp()内两个参数相等返回0
		exit(0);
	if(!strcmp(argc[0], "&"))    //后台运行
		return 1;
	return 0;                     //前台运行
}


//解析命令行 单引号括起来的字符作为一个参数，后台任务返回true，前台任务返回false
int parseline(const char *cmdline, char **argv) 
{
    static char array[MAXLINE];      //复制命令行
    char *buf = array;               // ptr that traverses command line */这一步中在字符串buf后会自动加上一个\0
    char *delim;                     / 指向第一个定界符
    int argc;                        
    int bg;                          

    strcpy(buf, cmdline);            //cmdline最后是\n 
    buf[strlen(buf)-1] = ' ';        //q把\n用空格替代
    while (*buf && (*buf == ' '))    //跳过头部的空格，注意这里的判断条件是&&  ' '也算一个字符
	      buf++;

    /* Build the argv list */
    argc = 0;

    while ((delim = strchr(buf, ' '))) {
	      argv[argc++] = buf;     //注意函数定义里的参数，argv是一个指向指针的数组，数组里存放的是指针
	      *delim = '\0';          //空格用\0来代替
	      buf = delim + 1;
	      while (*buf && (*buf == ' '))    /* ignore spaces */
	            buf++;
	      }
    }
    argv[argc] = NULL;
    
    if (argc == 0)  /* ignore blank line */
	      return 1;

    if ((bg = (*argv[argc-1] == '&')) != 0) {    //后台运行，bg = 1
	      argv[--argc] = NULL;
    }
    return bg;
}


//添加一项作业到作业列表中去
int addjob(struct job_t *jobs, pid_t pid, int state, char *cmdline) 
{
    int i;
    
    if (pid < 1)
	return 0;

    for (i = 0; i < MAXJOBS; i++) {
	if (jobs[i].pid == 0) {
	    jobs[i].pid = pid;
	    jobs[i].state = state;
	    jobs[i].jid = nextjid++;
	    if (nextjid > MAXJOBS)
		nextjid = 1;
	    strcpy(jobs[i].cmdline, cmdline);
  	    if(verbose){
	        printf("Added job [%d] %d %s\n", jobs[i].jid, jobs[i].pid, jobs[i].cmdline);
            }
            return 1;
	}
    }
    printf("Tried to create too many jobs\n");
    return 0;
}


//删除一个作业中的进程
int deletejob(struct job_t *jobs, pid_t pid) 
{
    int i;

    if (pid < 1)
	return 0;

    for (i = 0; i < MAXJOBS; i++) {
	if (jobs[i].pid == pid) {
	    clearjob(&jobs[i]);
	    nextjid = maxjid(jobs)+1;
	    return 1;
	}
    }
    return 0;
}
